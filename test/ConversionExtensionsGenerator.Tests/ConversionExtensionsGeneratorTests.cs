using System;
using System.IO;
using System.Linq;
using ConversionExtensionsGenerator.Tests.DataModels;
using ConversionExtensionsGenerator.Tests.Models;
using ConversionExtensionsGenerator.Tests.TestExtensions;
using FizzWare.NBuilder;
using KellermanSoftware.CompareNetObjects;
using Xunit;

namespace ConversionExtensionsGenerator.Tests
{
    public class ConversionExtensionsGeneratorTests
    {
        [Fact]
        public void GenerateConversionExtensionsTest()
        {
            var from = typeof(PlainEntity);
            var to = typeof(PlainEntityModel);
            var gen = new ExtensionsGenerator("ConversionExtensionsGenerator.Tests.TestExtensions", from.Assembly, from.Namespace, to.Assembly, to.Namespace);
            var outputFiles = gen.GenerateExtensionFiles();

            foreach (var outputFile in outputFiles.ExtensionFiles)
            {
                File.WriteAllText(Path.Combine(Path.GetFullPath("../../../TestExtensions"), $"{outputFile.FileName}.cs"), outputFile.FileSource);
            }

            Assert.True(!outputFiles.Errors.Any(), string.Join(Environment.NewLine, outputFiles.Errors.Select(x => $"{x.LogLevel}. {x.Message}")));
        }

        [Fact]
        public void AutoGeneratedExtensionsTests()
        {
            var compareLogic = new CompareLogic();
            compareLogic.Config.IgnoreObjectTypes = true;

            var plainEntity = Builder<PlainEntity>.CreateNew().Build();

            var entityModel = plainEntity.PlainEntityModelToPlainEntity();

            var result = compareLogic.Compare(plainEntity, entityModel);

            Assert.True(result.AreEqual, result.DifferencesString);
        }
    }
}
